class API:
    @staticmethod
    def send(message):
        data = request.get_json()
        message_type = data['message_type']
        if 'group' == message_type:
            group_id = data['group_id']
            params = {
                "message_type": message_type,
                "group_id": str(group_id),
                "message": message
            }
        else:
            user_id = data['user_id']
            params = {
                "message_type": message_type,
                "user_id": user_id,
                "message": message
            }
        url = "http://127.0.0.1:5700/send_msg"

        requests.get(url, params=params)  # 参考go-cqhttp

    # @staticmethod
    # def Timesend(message):  # 摆了,到时再改
    #
    #     params = {
    #         "message_type": 'group',
    #         "group_id": '1169648856',
    #         "message": message
    #     }
    #
    #     url = "http://127.0.0.1:5700/send_msg"
    #
    #     requests.get(url, params=params)

    @staticmethod
    def save_message():
        data = request.get_json()
        uid = data['user_id']
        message = data['message']
        message_id = data['message_id']
        send_time = data['time']
        message_type = data['message_type']
        nickname = data['sender']['nickname']
        if message_type == 'group':
            group_id = data['group_id']
        else:
            group_id = "无"
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute(
            "insert into message(QQ, message, message_id, send_time, message_type, group_id) values (?, ?, ?, ?, ?, ?)",
            (uid, message, message_id, send_time, message_type, group_id)
        )

        conn.commit()
        conn.close()

    @staticmethod
    def sign(uid,nickname):
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute('''SELECT * FROM Data WHERE QQ = ?''', (uid,))
        results = c.fetchone()
        print(results)
        add_coin = random.randint(1, 50)
        add_exp = random.randint(10, 20)
        coin = int(results[2])
        exp = int(results[3])
        IfSign = int(results[4])
        coin += add_coin
        exp += add_exp
        if IfSign:
            c.execute('''UPDATE Data SET coin = ?,exp = ?,IfSign = 0 WHERE QQ = ?''', (coin, exp, uid))
            a = nickname + \
                ("签到成功~\n日菜奖励你{0}个coin~\n经验up{1}~\n开始噜♪起来的一天吧~\n".format(add_coin, add_exp) + nickname + "酱已经有{0}个coin和{1}点经验了哦~".format(
                coin,
                exp))
        else:
            a = nickname + "已经签到过了哦~\n请明天再签到哦~\n"+ nickname + "酱已经有{0}个coin和{1}点经验了哦~".format(
                coin,
                exp)

        API.send(a)
        conn.commit()
        conn.close()

    @staticmethod
    def init_sign():
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute('''UPDATE Data SET IfSign = 1''')
        conn.commit()
        conn.close()

    @staticmethod
    def reply(message_id):
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute("SELECT * FROM message WHERE message_id = ?", (message_id,))
        results = c.fetchone()
        QQ = results[1]
        ID = results[0]
        group_id = results[6]
        message_type = results[5]
        num = ID + 1
        n = 0
        for i in range(60):
            n += 1
            try:
                c.execute("SELECT * FROM message WHERE id = ?", (num,))
                results = c.fetchone()
                new_QQ = results[1]
                new_group_id = results[6]
                new_message_type = results[5]
                if message_type == new_message_type == 'group':
                    if int(new_QQ) == int(QQ):
                        if int(new_group_id) == int(group_id):
                            new_message = results[2]
                            conn.commit()
                            conn.close()
                            return new_message
                        else:
                            num += 1
                            if n == 58:
                                conn.commit()
                                conn.close()
                                return "回复超时"
                            else:
                                time.sleep(1)
                                continue
                    else:
                        num += 1
                        if n == 58:
                            conn.commit()
                            conn.close()
                            return "回复超时"
                        else:
                            time.sleep(1)
                            continue
                elif message_type == new_message_type == 'private':
                    if int(new_QQ) == int(QQ):
                        new_message = results[2]
                        conn.commit()
                        conn.close()
                        return new_message
                    else:
                        num += 1
                        if n == 58:
                            conn.commit()
                            conn.close()
                            return "回复超时"
                        else:
                            time.sleep(1)
                            continue
                else:
                    num += 1
                    if n == 58:
                        conn.commit()
                        conn.close()
                        return "回复超时"
                    else:
                        time.sleep(1)
                        continue
            except:
                if n == 58:
                    conn.commit()
                    conn.close()
                    return "回复超时"
                else:
                    time.sleep(1)
                    continue

    @staticmethod
    def getImage():
        data = request.get_json()
        file = data['message']
        params = {
            "file": file
        }
        url = "http://127.0.0.1:5700/get_image"

        r = requests.get(url, params=params)
        print(r)

    @staticmethod
    def SetGroupBan(duration):
        data = request.get_json()
        group_id = int(data['group_id'])
        uid = data['user_id']
        params = {
            "group_id": group_id,
            "user_id": uid,
            "duration": duration
        }
        url = "http://127.0.0.1:5700/set_group_ban"

        requests.get(url, params=params)

    @staticmethod
    def Repeat(message_id):
        conn = sqlite3.connect("bot.db")
        c = conn.cursor()
        c.execute("SELECT * FROM message WHERE message_id = ?", (message_id,))
        results = c.fetchone()
        id = results[0]
        QQ = results[1]
        message1 = results[2]
        message1 = message1.replace("我", "你")
        group_id = results[6]
        message_type = results[5]
        send_time = int(results[4])
        num = id - 1
        c.execute("SELECT * FROM message WHERE id = ?", (num,))
        results = c.fetchone()
        new_QQ = results[1]
        new_group_id = results[6]
        new_message_type = results[5]
        message2 = results[2]
        new_send_time = int(results[4])
        c.execute("SELECT * FROM message WHERE id = ?", (num - 1,))
        results = c.fetchone()
        try:
            old_message = results[2]
        except:
            old_message = message1 + message2
        detal = send_time - new_send_time
        if message_type == new_message_type == 'group':
            if int(new_group_id) == int(group_id):
                if message1 == message2 and '/' not in message1:
                    if old_message != message1 and detal < 60:
                        API.send(message1)
        elif message_type == new_message_type == 'private':
            if int(new_QQ) == int(QQ):
                if message1 == message2 and '/' not in message1:
                    if old_message != message1 and detal < 60:
                        API.send(message1)
        conn.commit()
        conn.close()

    @staticmethod
    def save_memo(message):
        data = request.get_json()
        uid = data['user_id']
        message_id = data['message_id']
        send_time = data['time']
        message_type = data['message_type']
        if message_type == 'group':
            group_id = data['group_id']
        else:
            group_id = "无"
        conn = sqlite3.connect("remind.db")
        c = conn.cursor()
        c.execute(
            "insert into message(QQ, message, message_id, send_time, message_type, group_id) values (?, ?, ?, ?, ?, ?)",
            (uid, message, message_id, send_time, message_type, group_id))

        conn.commit()
        conn.close()

    @staticmethod
    def check_meno(uid):
        conn = sqlite3.connect("remind.db")
        c = conn.cursor()
        c.execute("SELECT * FROM message WHERE QQ = ?", (uid,))
        results = c.fetchall()
        if results != []:
            a = "[CQ:at,qq={0}]的备忘录如下哦~\n".format(uid)
            count = 1
            for i in results:
                if len(results) > count:
                    a += str(count) + "," + i[2] + "\n"
                else:
                    a += str(count) + "," + i[2]
                count += 1
        else:
            a = "[CQ:at,qq={0}]暂时没有备忘录哦~".format(uid)
        API.send(a)
        conn.commit()
        conn.close()

    @staticmethod
    def delete_meno(num, uid):
        conn = sqlite3.connect("remind.db")
        c = conn.cursor()
        c.execute("SELECT * FROM message WHERE QQ = ?", (uid,))
        results = c.fetchall()
        message = results[int(num) - 1][2]
        c.execute("DELETE FROM message WHERE message = ?", (message,))
        conn.commit()
        conn.close()

    @staticmethod
    def delete_Allmeno(uid):
        conn = sqlite3.connect("remind.db")
        c = conn.cursor()
        c.execute("DELETE FROM message WHERE QQ = ?", (uid,))
        conn.commit()
        conn.close()

    @staticmethod
    def HitCard():
        global m_isStudy
        time_str = time.strftime('%Y年%m月%d日%H时%M分%S秒')
        arr = ['1.gif', '2.gif', '3.png']
        if int(time_str[14] + time_str[15]) == 0 and int(time_str[17] + time_str[18]) <= 4:
            params1 = {
                "message_type": 'group',
                "group_id": '1169648856',
                "message": '小日菜来叫[CQ:at,qq=983853001]学习啦~\n不学习可噜不起来哦...[CQ:image,file=file:///C:/Users/15368/PycharmProjects/pythonProject1/image/{0}]'.format(
                    arr[random.randint(0, 2)])
            }
            params2 = {
                "message_type": 'group',
                "group_id": '1169648856',
                "message": '日菜酱来叫你一起吃饭了哦~[CQ:image,file=file:///C:/Users/15368/PycharmProjects/pythonProject1/image/4.png]'
            }
            params3 = {
                "message_type": 'group',
                "group_id": '1169648856',
                "message": '日菜要去找欧内酱睡觉了哦(ゝω・´★)!~你也一起来吧♪[CQ:image,file=file:///C:/Users/15368/PycharmProjects/pythonProject1/image/5.png]'
            }
            params4 = {
                "message_type": 'group',
                "group_id": '1169648856',
                "message": "打卡记录清空了哦~"
            }
            params5 = {
                "message_type": 'group',
                "group_id": '1169648856',
                "message": '小彩都生气了....\n[CQ:at,qq=983853001]还不学习....[CQ:image,file=file:///C:/Users/15368/PycharmProjects/pythonProject1/image/7.jpg]'
            }
            h = int(time_str[11] + time_str[12])
            if h != 14:
                if h == 12 or h == 18:
                    requests.get("http://127.0.0.1:5700/send_msg", params=params2)
                elif h == 13 or h == 0:
                    requests.get("http://127.0.0.1:5700/send_msg", params=params3)
                elif h % 2 == 0:
                    if m_isStudy:
                        requests.get("http://127.0.0.1:5700/send_msg", params=params1)
                        m_isStudy = 0
                    else:
                        requests.get("http://127.0.0.1:5700/send_msg", params=params5)
                if h == 0:
                    requests.get("http://127.0.0.1:5700/send_msg", params=params4)
                    API.ini_daily("1169648856")
                    API.init_sign()


        return int(time_str[17] + time_str[18])

    @staticmethod
    def Find(qq, arr):
        for i in arr:
            if qq == i:
                return 0
        return 1

    @staticmethod
    def tick1(send_time, temp_time1, state, tem_qq, num):
        for i in range(0, 3):
            if int(send_time) - temp_time1[i] > num[i] * 60 and state[i] == 1:
                state[i] = 0
                temp_time1[i] = 0
                API.Timesend("起床啦~[CQ:at,qq=" + str(tem_qq[i]) + "]\n再睡下去可噜不起来哦....")
                tem_qq[i] = ''

    @staticmethod
    def tick2(send_time, temp_time2, state, tem_qq, num):
        for i in range(0, 3):
            if int(send_time) - temp_time2[i] > num[i] * 60 and state[i] == 2:
                state[i] = 0
                temp_time2[i] = 0
                API.Timesend("起床啦~[CQ:at,qq=" + str(tem_qq[i]) + "]\n再睡下去可噜不起来哦....")
                tem_qq[i] = ''

    @staticmethod
    def relaxCaul(message, uid, send_time):
        i = 0
        while "/a " in message and state[i] != 0:
            print(i)
            i += 1
        if '/a ' in message and state[i] == 0 and API.Find(uid, tem_qq):
            temp_time1[i] = send_time
            tem_qq[i] = uid
            state[i] = 1
            num1[i] = int(message[message.find(" ") + 1:message.find("分")])


    @staticmethod
    def song(name_song):
        url = "https://c.y.qq.com/soso/fcgi-bin/client_search_cp"

        params = {
            'aggr': '1',
            'cr': '1',
            'flag_qc': '1',
            'p': '1',
            'n': '1',
            'w': name_song
        }
        headers = {
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) "
                          "Chrome/94.0.4606.71 Safari/537.36 Core/1.94.186.400 QQBrowser/11.3.5195.400 "
        }
        pass

    @staticmethod
    def new_daily(message):
        data = request.get_json()
        uid = data['user_id']
        message_id = data['message_id']
        send_time = data['time']
        message_type = data['message_type']
        message += " ()"
        if message_type == 'group':
            group_id = data['group_id']
        else:
            group_id = "无"
        conn = sqlite3.connect("daily.db")
        c = conn.cursor()
        c.execute(
            "insert into message(QQ, message, message_id, send_time, message_type, group_id) values (?, ?, ?, ?, ?, ?)",
            (uid, message, message_id, send_time, message_type, group_id))

        conn.commit()
        conn.close()

    @staticmethod
    def check_daily(uid):
        conn = sqlite3.connect("daily.db")
        c = conn.cursor()
        c.execute("SELECT * FROM message WHERE QQ = ?", (uid,))
        results = c.fetchall()
        if results != []:
            a = "[CQ:at,qq={0}]的打卡任务如下哦~\n".format(uid)
            count = 1
            for i in results:
                if len(results) > count:
                    a += str(count) + "," + i[2] + "\n"
                else:
                    a += str(count) + "," + i[2]
                count += 1
        else:
            a = "[CQ:at,qq={0}]暂时没有每日打卡哦~".format(uid)
        API.send(a)
        conn.commit()
        conn.close()

    @staticmethod
    def delete_daily(num, uid):
        conn = sqlite3.connect("daily.db")
        c = conn.cursor()
        c.execute("SELECT * FROM message WHERE QQ = ?", (uid,))
        results = c.fetchall()
        message = results[int(num) - 1][2]
        c.execute("DELETE FROM message WHERE message = ?", (message,))
        conn.commit()
        conn.close()

    @staticmethod
    def tick_daily(num, uid):
        conn = sqlite3.connect("daily.db")
        c = conn.cursor()
        c.execute("SELECT * FROM message WHERE QQ = ?", (uid,))
        results = c.fetchall()
        message = results[int(num) - 1][2]
        c.execute("SELECT * FROM message WHERE message = ?", (message,))
        results = c.fetchone()
        if "()" in results[2]:
            new_message = results[2].replace("()", "(√)")
            API.send("[CQ:at,qq={0}]完成了一次打卡哦~".format(uid))
        elif "(√)" in results[2]:
            new_message = results[2].replace("(√)", "()")
            API.send("[CQ:at,qq={0}]打卡失败了...".format(uid))
        c.execute('UPDATE message SET message = ? where message = ?', (new_message, message))
        c.execute("SELECT * FROM message WHERE QQ = ?", (uid,))
        results = c.fetchall()
        if API.Find_arr("()", results):
            API.send("[CQ:at,qq={0}]的今日打卡全勤了哦~".format(uid))
        conn.commit()
        conn.close()

    @staticmethod
    def Find_arr(str, arr):
        for i in arr:
            if str in i[2]:
                return 0
        return 1

    @staticmethod
    def ini_daily(group_id):
        conn = sqlite3.connect("daily.db")
        c = conn.cursor()
        c.execute("SELECT * FROM message WHERE group_id = ?", (group_id,))
        results = c.fetchall()
        for i in results:
            new_message = i[2].replace("(√)", "()")
            c.execute('UPDATE message SET message = ? where message = ?', (new_message, i[2]))
        conn.commit()
        conn.close()

    @staticmethod
    def mod_daily(mes, num, uid):
        conn = sqlite3.connect("daily.db")
        c = conn.cursor()
        c.execute("SELECT * FROM message WHERE QQ = ?", (uid,))
        results = c.fetchall()
        message = results[int(num) - 1][2]
        c.execute("SELECT * FROM message WHERE message = ?", (message,))
        results = c.fetchone()
        temp_message = results[2][:results[2].find(" ")]
        rep_message = results[2].replace(temp_message, mes)
        c.execute('UPDATE message SET message = ? where message = ?', (rep_message, message))
        conn.commit()
        conn.close()

    @staticmethod
    def exit():
        sys.exit(0)


@app.route('/', methods=["POST"])
def post_data():
    """下面的request.get_json().get......是用来获取关键字的值用的，关键字参考上面代码段的数据格式"""
    data = request.get_json()
    print(data)
    global state, num1, num2, temp_time1, temp_time2, tem_qq, m_isStudy
    send_time = int(data['time'])
    if data['post_type'] == 'message':  # 如果接受到信息
        message_id = data['message_id']
        message = data['message']
        uid = str(data['user_id'])
        print(message)
        if uid == '983853001':
            m_isStudy = 1
        if API.Find(uid, tem_qq):  # 未进入状态
            API.save_message()
            API.Repeat(message_id)
            menu.menu()
        else:
            API.save_message("OK")
        API.relaxCaul(message, uid, send_time)
    else:
        pass
    try:
        API.tick1(send_time, temp_time1, state, tem_qq, num1)
        API.tick2(send_time, temp_time2, state, tem_qq, num2)
    except:
        pass

    if state[0] == 0 and state[1] == 0 and state[2] == 0:
        API.HitCard()
    print(state)
    print(tem_qq)
    print(temp_time1)
    print(m_isStudy)
    return "OK"


if __name__ == '__main__':
    # 此处的 host和 port对应上面 yml文件的设置
    app.run(host='0.0.0.0', port=5701)  # 保证和配置里填的一致